"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var application = require("application");
var observable_1 = require("data/observable");
var bookmarks_1 = require("../common/bookmarks");
var AppViewModel_1 = require("../common/AppViewModel");
var gestures_1 = require("ui/gestures");
var enums_1 = require("ui/enums");
var HistoryViewModel = (function (_super) {
    __extends(HistoryViewModel, _super);
    function HistoryViewModel() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.historyList = bookmarks_1.historyList;
        return _this;
    }
    return HistoryViewModel;
}(observable_1.Observable));
exports.HistoryViewModel = HistoryViewModel;
exports.viewModel = new HistoryViewModel();
var listView;
var editing = false;
function onLoaded(args) {
    listView = args.object;
    listView.bindingContext = exports.viewModel;
}
exports.onLoaded = onLoaded;
function onTap(args) {
    clearTimeout(tapTimerId);
    if (editing)
        return;
    closeAllCells();
    var item = args.object.bindingContext;
    AppViewModel_1.appViewModel.loadUrl(item.uri);
}
exports.onTap = onTap;
function onDelete(args) {
    closeAllCells();
    var item = args.object.bindingContext;
    var i = bookmarks_1.historyList.indexOf(item);
    bookmarks_1.historyList.splice(i, 1);
}
exports.onDelete = onDelete;
var swipeLimit = -64;
var openCells = [];
var tapTimeout = 150;
var tapTimerId = -1;
function onItemLoaded(args) {
    var itemView = args.object;
    var contentView = itemView.getViewById('content');
    var deleteView = itemView.getViewById('delete');
    var cell = { contentView: contentView, deleteView: deleteView };
    var panStart = 0;
    contentView.on(gestures_1.GestureTypes.pan, function (data) {
        if (data.state === gestures_1.GestureStateTypes.began) {
            if (application.android) {
                closeAllCells(cell);
                tapTimerId = setTimeout(function () {
                    panStart = contentView.translateX + data.deltaX;
                    editing = true;
                }, tapTimeout);
            }
            else {
                panStart = contentView.translateX;
                closeAllCells(cell);
                editing = true;
            }
        }
        else {
            // wait for tap timeout before handling this gesture (only on android)
            if (!editing)
                return;
        }
        contentView.translateX = Math.min(Math.max(panStart + data.deltaX, -1000), 0);
        if (data.state === gestures_1.GestureStateTypes.ended) {
            clearTimeout(tapTimerId);
            editing = false;
            var open = contentView.translateX < swipeLimit * 0.75;
            toggleCellSwipeState(cell, open);
        }
        else {
            deleteView.visibility = 'visible';
        }
    });
}
exports.onItemLoaded = onItemLoaded;
function closeAllCells(exceptCell) {
    openCells.forEach(function (cell) {
        if (cell !== exceptCell)
            toggleCellSwipeState(cell, false);
    });
    openCells = exceptCell ? [exceptCell] : [];
}
function toggleCellSwipeState(cell, open) {
    var finalTranslateX = open ? swipeLimit : 0;
    cell.contentView.animate({
        translate: { x: finalTranslateX, y: 0 },
        curve: enums_1.AnimationCurve.easeInOut
    }).then(function () {
        cell.contentView.translateX = finalTranslateX;
        if (!open)
            cell.deleteView.visibility = 'collapse';
    });
    if (open) {
        openCells.push(cell);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSGlzdG9yeVZpZXcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJIaXN0b3J5Vmlldy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHlDQUEyQztBQUMzQyw4Q0FBMkM7QUFHM0MsaURBQTZEO0FBQzdELHVEQUFtRDtBQUVuRCx3Q0FJcUI7QUFFckIsa0NBQXVDO0FBRXZDO0lBQXNDLG9DQUFVO0lBQWhEO1FBQUEscUVBRUM7UUFERyxpQkFBVyxHQUFHLHVCQUFXLENBQUM7O0lBQzlCLENBQUM7SUFBRCx1QkFBQztBQUFELENBQUMsQUFGRCxDQUFzQyx1QkFBVSxHQUUvQztBQUZZLDRDQUFnQjtBQUdoQixRQUFBLFNBQVMsR0FBRyxJQUFJLGdCQUFnQixFQUFFLENBQUM7QUFFaEQsSUFBSSxRQUFpQixDQUFDO0FBQ3RCLElBQUksT0FBTyxHQUFHLEtBQUssQ0FBQztBQUVwQixrQkFBeUIsSUFBSTtJQUN6QixRQUFRLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUN2QixRQUFRLENBQUMsY0FBYyxHQUFHLGlCQUFTLENBQUM7QUFDeEMsQ0FBQztBQUhELDRCQUdDO0FBRUQsZUFBc0IsSUFBSTtJQUN0QixZQUFZLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDekIsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDO1FBQUMsTUFBTSxDQUFBO0lBQ25CLGFBQWEsRUFBRSxDQUFDO0lBQ2hCLElBQUksSUFBSSxHQUFpQixJQUFJLENBQUMsTUFBZSxDQUFDLGNBQWMsQ0FBQztJQUM3RCwyQkFBWSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDbkMsQ0FBQztBQU5ELHNCQU1DO0FBRUQsa0JBQXlCLElBQUk7SUFDekIsYUFBYSxFQUFFLENBQUM7SUFDaEIsSUFBSSxJQUFJLEdBQWlCLElBQUksQ0FBQyxNQUFlLENBQUMsY0FBYyxDQUFDO0lBQzdELElBQUksQ0FBQyxHQUFHLHVCQUFXLENBQUMsT0FBTyxDQUFDLElBQUks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QUFjLEVBQUUsSUFBWTtJQUN0RCxJQUFNLGVBQWUsR0FBRyxJQUFJLEdBQUcsVUFBVSxHQUFHLENBQUMsQ0FBQTtJQUM3QyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQztRQUNyQixTQUFTLEVBQUMsRUFBQyxDQUFDLEVBQUMsZUFBZSxFQUFFLENBQUMsRUFBQyxDQUFDLEVBQUM7UUFDbEMsS0FBSyxFQUFFLHNCQUFjLENBQUMsU0FBUztLQUNsQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQ0osSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLEdBQUcsZUFBZSxDQUFDO1FBQzlDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO0lBQ3ZELENBQUMsQ0FBQyxDQUFDO0lBQ0gsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNQLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDekIsQ0FBQztBQUNMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBhcHBsaWNhdGlvbiBmcm9tICdhcHBsaWNhdGlvbic7XG5pbXBvcnQge09ic2VydmFibGV9IGZyb20gJ2RhdGEvb2JzZXJ2YWJsZSc7XG5pbXBvcnQge1ZpZXd9IGZyb20gJ3VpL2NvcmUvdmlldyc7XG5pbXBvcnQge0xpc3RWaWV3fSBmcm9tICd1aS9saXN0LXZpZXcnO1xuaW1wb3J0IHtCb29rbWFya0l0ZW0sIGhpc3RvcnlMaXN0fSBmcm9tICcuLi9jb21tb24vYm9va21hcmtzJ1xuaW1wb3J0IHthcHBWaWV3TW9kZWx9IGZyb20gJy4uL2NvbW1vbi9BcHBWaWV3TW9kZWwnXG5cbmltcG9ydCB7XG4gIEdlc3R1cmVUeXBlcyxcbiAgR2VzdHVyZVN0YXRlVHlwZXMsXG4gIFBhbkdlc3R1cmVFdmVudERhdGEsXG59IGZyb20gJ3VpL2dlc3R1cmVzJztcblxuaW1wb3J0IHtBbmltYXRpb25DdXJ2ZX0gZnJvbSAndWkvZW51bXMnXG5cbmV4cG9ydCBjbGFzcyBIaXN0b3J5Vmlld01vZGVsIGV4dGVuZHMgT2JzZXJ2YWJsZSB7XG4gICAgaGlzdG9yeUxpc3QgPSBoaXN0b3J5TGlzdDtcbn1cbmV4cG9ydCBjb25zdCB2aWV3TW9kZWwgPSBuZXcgSGlzdG9yeVZpZXdNb2RlbCgpO1xuXG5sZXQgbGlzdFZpZXc6TGlzdFZpZXc7XG5sZXQgZWRpdGluZyA9IGZhbHNlO1xuXG5leHBvcnQgZnVuY3Rpb24gb25Mb2FkZWQoYXJncykge1xuICAgIGxpc3RWaWV3ID0gYXJncy5vYmplY3Q7XG4gICAgbGlzdFZpZXcuYmluZGluZ0NvbnRleHQgPSB2aWV3TW9kZWw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBvblRhcChhcmdzKSB7XG4gICAgY2xlYXJUaW1lb3V0KHRhcFRpbWVySWQpO1xuICAgIGlmIChlZGl0aW5nKSByZXR1cm5cbiAgICBjbG9zZUFsbENlbGxzKCk7XG4gICAgdmFyIGl0ZW06Qm9va21hcmtJdGVtID0gKGFyZ3Mub2JqZWN0IGFzIFZpZXcpLmJpbmRpbmdDb250ZXh0O1xuICAgIGFwcFZpZXdNb2RlbC5sb2FkVXJsKGl0ZW0udXJpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG9uRGVsZXRlKGFyZ3MpIHtcbiAgICBjbG9zZUFsbENlbGxzKCk7XG4gICAgdmFyIGl0ZW06Qm9va21hcmtJdGVtID0gKGFyZ3Mub2JqZWN0IGFzIFZpZXcpLmJpbmRpbmdDb250ZXh0O1xuICAgIHZhciBpID0gaGlzdG9yeUxpc3QuaW5kZXhPZihpdGVtKTtcbiAgICBoaXN0b3J5TGlzdC5zcGxpY2UoaSwgMSk7XG59XG5cbmNvbnN0IHN3aXBlTGltaXQgPSAtNjQ7XG5cbmludGVyZmFjZSBDZWxsVmlld3Mge1xuICAgIGNvbnRlbnRWaWV3OlZpZXcsIFxuICAgIGRlbGV0ZVZpZXc6Vmlld1xufVxuXG5sZXQgb3BlbkNlbGxzOkFycmF5PENlbGxWaWV3cz4gPSBbXVxuXG5jb25zdCB0YXBUaW1lb3V0ID0gMTUwO1xudmFyIHRhcFRpbWVySWQgPSAtMTtcblxuZXhwb3J0IGZ1bmN0aW9uIG9uSXRlbUxvYWRlZChhcmdzKSB7XG4gICAgdmFyIGl0ZW1WaWV3OlZpZXcgPSBhcmdzLm9iamVjdDtcbiAgICB2YXIgY29udGVudFZpZXcgPSBpdGVtVmlldy5nZXRWaWV3QnlJZCgnY29udGVudCcpO1xuICAgIHZhciBkZWxldGVWaWV3ID0gaXRlbVZpZXcuZ2V0Vmlld0J5SWQoJ2RlbGV0ZScpO1xuICAgIHZhciBjZWxsID0ge2NvbnRlbnRWaWV3LCBkZWxldGVWaWV3fTtcblxuICAgIHZhciBwYW5TdGFydD0wO1xuICAgIGNvbnRlbnRWaWV3Lm9uKEdlc3R1cmVUeXBlcy5wYW4sIChkYXRhOlBhbkdlc3R1cmVFdmVudERhdGEpPT57XG4gICAgICAgIFxuICAgICAgICBpZiAoZGF0YS5zdGF0ZSA9PT0gR2VzdHVyZVN0YXRlVHlwZXMuYmVnYW4pIHtcbiAgICAgICAgICAgIGlmIChhcHBsaWNhdGlvbi5hbmRyb2lkKSB7XG4gICAgICAgICAgICAgICAgY2xvc2VBbGxDZWxscyhjZWxsKTtcbiAgICAgICAgICAgICAgICB0YXBUaW1lcklkID0gc2V0VGltZW91dCgoKT0+e1xuICAgICAgICAgICAgICAgICAgICBwYW5TdGFydCA9IGNvbnRlbnRWaWV3LnRyYW5zbGF0ZVggKyBkYXRhLmRlbHRhWDtcbiAgICAgICAgICAgICAgICAgICAgZWRpdGluZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgfSwgdGFwVGltZW91dCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBhblN0YXJ0ID0gY29udGVudFZpZXcudHJhbnNsYXRlWDtcbiAgICAgICAgICAgICAgICBjbG9zZUFsbENlbGxzKGNlbGwpO1xuICAgICAgICAgICAgICAgIGVkaXRpbmcgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gd2FpdCBmb3IgdGFwIHRpbWVvdXQgYmVmb3JlIGhhbmRsaW5nIHRoaXMgZ2VzdHVyZSAob25seSBvbiBhbmRyb2lkKVxuICAgICAgICAgICAgaWYgKCFlZGl0aW5nKSByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGNvbnRlbnRWaWV3LnRyYW5zbGF0ZVggPSBNYXRoLm1pbihNYXRoLm1heChwYW5TdGFydCArIGRhdGEuZGVsdGFYLCAtMTAwMCksIDApO1xuICAgICAgICBcbiAgICAgICAgaWYgKGRhdGEuc3RhdGUgPT09IEdlc3R1cmVTdGF0ZVR5cGVzLmVuZGVkKSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGFwVGltZXJJZCk7XG4gICAgICAgICAgICBlZGl0aW5nID0gZmFsc2U7XG4gICAgICAgICAgICB2YXIgb3BlbiA9IGNvbnRlbnRWaWV3LnRyYW5zbGF0ZVggPCBzd2lwZUxpbWl0KjAuNzU7XG4gICAgICAgICAgICB0b2dnbGVDZWxsU3dpcGVTdGF0ZShjZWxsLCBvcGVuKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRlbGV0ZVZpZXcudmlzaWJpbGl0eSA9ICd2aXNpYmxlJztcbiAgICAgICAgfVxuICAgICAgICBcbiAgICB9KVxufVxuXG5mdW5jdGlvbiBjbG9zZUFsbENlbGxzKGV4Y2VwdENlbGw/OkNlbGxWaWV3cykge1xuICAgIG9wZW5DZWxscy5mb3JFYWNoKChjZWxsKT0+e1xuICAgICAgICBpZiAoY2VsbCAhPT0gZXhjZXB0Q2VsbCkgdG9nZ2xlQ2VsbFN3aXBlU3RhdGUoY2VsbCwgZmFsc2UpO1xuICAgIH0pXG4gICAgb3BlbkNlbGxzID0gZXhjZXB0Q2VsbCA/IFtleGNlcHRDZWxsXSA6IFtdO1xufVxuXG5mdW5jdGlvbiB0b2dnbGVDZWxsU3dpcGVTdGF0ZShjZWxsOkNlbGxWaWV3cywgb3Blbjpib29sZWFuKSB7XG4gICAgY29uc3QgZmluYWxUcmFuc2xhdGVYID0gb3BlbiA/IHN3aXBlTGltaXQgOiAwXG4gICAgY2VsbC5jb250ZW50Vmlldy5hbmltYXRlKHtcbiAgICAgICAgdHJhbnNsYXRlOnt4OmZpbmFsVHJhbnNsYXRlWCwgeTowfSxcbiAgICAgICAgY3VydmU6IEFuaW1hdGlvbkN1cnZlLmVhc2VJbk91dFxuICAgIH0pLnRoZW4oKCk9PntcbiAgICAgICAgY2VsbC5jb250ZW50Vmlldy50cmFuc2xhdGVYID0gZmluYWxUcmFuc2xhdGVYO1xuICAgICAgICBpZiAoIW9wZW4pIGNlbGwuZGVsZXRlVmlldy52aXNpYmlsaXR5ID0gJ2NvbGxhcHNlJztcbiAgICB9KTtcbiAgICBpZiAob3Blbikge1xuICAgICAgICBvcGVuQ2VsbHMucHVzaChjZWxsKTtcbiAgICB9XG59Il19